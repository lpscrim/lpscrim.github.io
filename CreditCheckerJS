// All valid credit card numbers
const valid1 = [4, 5, 3, 9, 6, 7, 7, 9, 0, 8, 0, 1, 6, 8, 0, 8];
const valid2 = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9];
const valid3 = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6];
const valid4 = [6, 0, 1, 1, 1, 4, 4, 3, 4, 0, 6, 8, 2, 9, 0, 5];
const valid5 = [4, 5, 3, 9, 4, 0, 4, 9, 6, 7, 8, 6, 9, 6, 6, 6];

// All invalid credit card numbers
const invalid1 = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5];
const invalid2 = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3];
const invalid3 = [3, 7, 5, 7, 9, 6, 0, 8, 4, 4, 5, 9, 9, 1, 4];
const invalid4 = [6, 0, 1, 1, 1, 2, 7, 9, 6, 1, 7, 7, 7, 9, 3, 5];
const invalid5 = [5, 3, 8, 2, 0, 1, 9, 7, 7, 2, 8, 8, 3, 8, 5, 4];

// Can be either valid or invalid
const mystery1 = [3, 4, 4, 8, 0, 1, 9, 6, 8, 3, 0, 5, 4, 1, 4];
const mystery2 = [5, 4, 6, 6, 1, 0, 0, 8, 6, 1, 6, 2, 0, 2, 3, 9];
const mystery3 = [6, 0, 1, 1, 3, 7, 7, 0, 2, 0, 9, 6, 2, 6, 5, 6, 2, 0, 3];
const mystery4 = [4, 9, 2, 9, 8, 7, 7, 1, 6, 9, 2, 1, 7, 0, 9, 3];
const mystery5 = [4, 9, 1, 3, 5, 4, 0, 4, 6, 3, 0, 7, 2, 5, 2, 3];

// An array of all the arrays above
const batch = [valid1, valid2, valid3, valid4, valid5, invalid1, invalid2, invalid3, invalid4, invalid5, mystery1, mystery2, mystery3, mystery4, mystery5];


// Add your functions below:

const validateCred = array => {             // Function to validate card
  const newArray = array.slice().reverse(); // Create new reversed array 
  let sum = 0;                              // Initialise variables
  let ans = true;                           
  newArray.forEach((n, i) => {              // Iterate each number of card
    if(i % 2){                              // Ensure only every 2 digits used
      let x = n * 2;                        // Luhn algorithm
      x > 9 ? sum += (x - 9) : sum += x;
    } else {
      sum += n;
    };
  });
  sum % 10 == 0 ? ans = true : ans = false; // Truthy val determined
  return ans;                               // Return truthy
}
//console.log(validateCred(invalid3))

 const findInvalidCards = cards => {        // Function to make arr of inv cards
  let invalidCards = [];                    // Initialise new array
  for (const card of cards) {               // Iterate each card in batch
    !validateCred(card) ? invalidCards.push(card) : '';
  };                                        // If calback is false add to arr
  return invalidCards;                      // Return value
};

//console.log(findInvalidCards(batch))

const idInvalidCardCompanies = invalid => { // Fnctn to make arr of inv companies
  let invalidCompanies = []                 // Initialise arr and variables
  let amx = 0
  let mst = 0
  let vsa = 0
  let dsk = 0
  for (i in invalid) {                      // Iterate each card in batch
    switch (invalid[i][0]){                 // Incriment each var if num present
      case 3: 
      amx += 1;
      break;
      case 4:
      vsa += 1;
      break;
      case 5:
      mst += 1;
      break;
      case 6:
      dsk += 1;
    };
  };                                         // Add company to arr if present
  amx > 0 ? invalidCompanies.push('Amex') : '';
  vsa > 0 ? invalidCompanies.push('Visa') : '';
  mst > 0 ? invalidCompanies.push('Mastercard') : ''; 
  dsk > 0 ? invalidCompanies.push('Discovery') : '';
  return invalidCompanies;                   // Return value
};

//console.log(idInvalidCardCompanies(findInvalidCards(batch)))

const makeValid = old => {                    // Fnctn to make card valid if not
  let newArray = old.slice().reverse();       // assign new arr reversed card
  let sum = 0;                                // Initialise values
  let ans = true;
  let rem = 0;
  newArray.forEach((n, i) => {                //  ***Same as first function***
    if(i % 2){
      let x = n * 2;
      x > 9 ? sum += (x - 9) : sum += x;
    } else {
      sum += n;
    };
  });
  rem = sum % 10
  rem == 0 ? ans = true : ans = false;
  if(ans == false) {                           // Make up remainder with arr[0]
    rem <= newArray[0] ? newArray[0] -= rem : newArray[0] += (10 - rem);
  };
  return newArray.reverse()                    // Return new array.
}

//console.log(makeValid(invalid3))

const convertToArr = str => {                  // Fnctn to cnvrt to arr of num
  arr = str.split('');                         // Split to array
  const newArr = arr.map((a) => parseInt(a));  // map to new arr of num
  return newArr;                               // return new array
}

//console.log(convertToArr('123456789'))
